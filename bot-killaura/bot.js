const mineflayer = require('mineflayer')
const { pathfinder, Movements, goals } = require('mineflayer-pathfinder')
const config = require('./config.json')

// ========== T·∫ÆT C·∫¢NH B√ÅO PARTIAL PACKET ==========
process.setMaxListeners(50)
process.on('warning', (warning) => {
  if (warning.message.includes('partial packet')) return
})

let bots = []
let completedBots = 0
let allBotsCompleted = false
let globalIntervalId = null
let resetIntervalId = null

// ========== H√ÄM X√ìA TERMINAL CHO TERMUX ==========
function clearTerminal() {
  process.stdout.write('\x1B[2J\x1B[3J\x1B[H');
}

// ========== H√ÄM RESET T·∫§T C·∫¢ BOT ==========
async function resetAllBots() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu reset t·∫•t c·∫£ bot...')
  
  // D·ªçn d·∫πp interval to√†n c·ª•c n·∫øu c√≥
  if (globalIntervalId) {
    clearInterval(globalIntervalId)
    globalIntervalId = null
  }
  
  // Ng·∫Øt k·∫øt n·ªëi t·∫•t c·∫£ bot
  for (const bot of bots) {
    try {
      if (bot && typeof bot.quit === 'function') {
        bot.quit()
        console.log(`[${bot.username}] ƒê√£ ng·∫Øt k·∫øt n·ªëi`)
      }
    } catch (err) {
      console.log(`L·ªói khi ng·∫Øt k·∫øt n·ªëi bot: ${err.message}`)
    }
  }
  
  // Reset bi·∫øn to√†n c·ª•c
  bots = []
  completedBots = 0
  allBotsCompleted = false
  
  // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ bot ƒë√£ ng·∫Øt k·∫øt n·ªëi
  await new Promise(resolve => setTimeout(resolve, 5000))
  
  // Kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ bot
  console.log('üîÑ Kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ bot...')
  config.botConfigs.forEach((botConfig, index) => {
    createBotWithDelay(botConfig, index * config.intervals.botStartDelay, index)
  })
}

// ========== H√ÄM T·∫†O BOT ==========
function createBotWithDelay(botConfig, delay, index) {
  setTimeout(() => {
    console.log(`üöÄ Kh·ªüi ƒë·ªông bot: ${botConfig.username}`)
    
    const botOptions = {
      host: config.server.host,
      port: config.server.port,
      username: botConfig.username,
      version: config.server.version,
      keepAlive: true,         
      checkTimeoutInterval: 120 * 1000  
    }

    const bot = mineflayer.createBot(botOptions)
    bot.loadPlugin(pathfinder)
    bot.botConfig = botConfig

    // T·∫Øt c·∫£nh b√°o partial packet
    bot._client.on('error', (err) => {
      if (err.message.includes('partial packet')) return
    })

    setupBotEvents(bot)
    bots.push(bot)
  }, delay)
}

function startHotbarLogger(bot) {
  console.log(`[${bot.username}] üì¶ B·∫Øt ƒë·∫ßu log th√¥ng tin hotbar m·ªói ${config.intervals.hotbarLog/1000} gi√¢y`)

  const logHotbarItems = () => {
    // Hotbar: slots 36 ƒë·∫øn 44
    const hotbarSlots = Array.from({ length: 45 }, (_, i) => i )
    const items = hotbarSlots.map(slot => {
      const item = bot.inventory.slots[slot]
      return item ? `${item.name} (x${item.count})` : 'Tr·ªëng'
    })
    
    console.log(`[${bot.username}] üéí HOTBAR: ${items.join(' | ')}`)
  }

  // Thi·∫øt l·∫≠p interval
  return setInterval(logHotbarItems, config.intervals.hotbarLog)
}

// ========== H√ÄM T·ª∞ ƒê·ªòNG ƒÇN STEAK ==========
async function autoEatSteak(bot) {
  try {
    // N·∫øu food <= threshold th√¨ ƒÉn
    if (bot.food <= config.settings.foodThreshold) {
      console.log(`[${bot.username}] üçó ƒêang ƒë√≥i (${bot.food}/20), t√¨m steak...`)

      // Slot cu·ªëi c√πng c·ªßa inventory = 44
      const steak = bot.inventory.slots[44]

      if (!steak || steak.name !== 'cooked_beef') {
        console.log(`[${bot.username}] ‚ùå Kh√¥ng c√≥ steak ·ªü slot cu·ªëi`)
        return
      }

      // Equip steak l√™n tay
      await bot.equip(steak, 'hand')

      // ƒÇn
      await bot.consume()
      console.log(`[${bot.username}] ‚úÖ ƒê√£ ƒÉn steak`)

      // Ch·ªânh l·∫°i v·ªÅ hotbar slot 1 (index = 0)
      bot.setQuickBarSlot(0)
      console.log(`[${bot.username}] üîÑ ƒê√£ ƒë·ªïi l·∫°i v·ªÅ hotbar slot 1`)
    }
  } catch (err) {
    console.log(`[${bot.username}] ‚ö†Ô∏è L·ªói khi auto ƒÉn:`, err)
  }
}

// ========== T√åM ENTITY G·∫¶N NH·∫§T NGO·∫†I TR·ª™ PLAYER ==========
function findNearestEntityExceptPlayer(bot) {
  const entityFilter = e => e.type !== 'player' && e.displayName !== 'Text Display'&& e.displayName !== 'Item' && 
                          e.position.distanceTo(bot.entity.position) < config.settings.attackRange
  
  const entity = bot.nearestEntity(entityFilter)
  return entity
}

// ========== T·∫§N C√îNG ENTITY NG·∫™U NHI√äN ==========
function startRandomAttacking(bot) {
  console.log(`[${bot.username}] üó°Ô∏è B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô t·∫•n c√¥ng "gi·ªëng ng∆∞·ªùi"`)

  let attackInterval = null
  let resetAttackInterval = null
  let attackCount = 0

  const attack = async () => {
    const entity = findNearestEntityExceptPlayer(bot)
    if (!entity) return

    // Nh√¨n v√†o entity
    await bot.lookAt(entity.position.offset(0, 1, 0))
    const distance = entity.position.distanceTo(bot.entity.position)
    console.log(
      `[${bot.username}] üìç ${entity.displayName} - Kho·∫£ng c√°ch: ${distance.toFixed(1)}m - V·ªã tr√≠: X:${Math.round(entity.position.x)} Y:${Math.round(entity.position.y)} Z:${Math.round(entity.position.z)}`
    )
    if (entity.displayName === 'Armor Stand') {
      resetAllBots()
      return
    }

    const cycle = attackCount % 100

    if (cycle < config.settings.criticalHitCycles) {
      // Critical hits
      bot.setControlState('jump', true)
      setTimeout(() => bot.setControlState('jump', false), 100)

      setTimeout(() => {
        if (bot.entity.onGround) return
        bot.attack(entity)
        attackCount++
        console.log(`[${bot.username}] üí• Critical hit v√†o ${entity.displayName} (l·∫ßn ${attackCount})`)
      }, 400)

    } else {
      // Normal hits
      bot.attack(entity)
      attackCount++
      console.log(`[${bot.username}] üó°Ô∏è Normal hit v√†o ${entity.displayName} (l·∫ßn ${attackCount})`)
    }
  }

  const startAttackInterval = () => {
    const delay = config.intervals.attackDelayMin + Math.random() * (config.intervals.attackDelayMax - config.intervals.attackDelayMin)
    attackInterval = setInterval(attack, delay)
    console.log(`[${bot.username}] ‚è∞ T·∫•n c√¥ng m·ªói ~${delay.toFixed(0)}ms`)
  }

  startAttackInterval()

  // Reset interval ƒë·ªÉ delay thay ƒë·ªïi
  resetAttackInterval = setInterval(() => {
    if (attackInterval) {
      clearInterval(attackInterval)
      startAttackInterval()
    }
  }, config.intervals.attackPatternReset)

  // H√†m d·ª´ng
  return () => {
    if (attackInterval) {
      clearInterval(attackInterval)
      attackInterval = null
    }
    if (resetAttackInterval) {
      clearInterval(resetAttackInterval)
      resetAttackInterval = null
    }
    console.log(`[${bot.username}] üõë D·ª´ng t·∫•n c√¥ng - T·ªïng s·ªë l·∫ßn t·∫•n c√¥ng: ${attackCount}`)
  }
}

// ========== KI·ªÇM TRA T·∫§T C·∫¢ BOT ƒê√É HO√ÄN TH√ÄNH ==========
function checkAllBotsCompleted() {
  if (completedBots === config.botConfigs.length && !allBotsCompleted) {
    allBotsCompleted = true
    
    // ƒê·ª£i 3 gi√¢y tr∆∞·ªõc khi clear terminal
    setTimeout(() => {
      // X√≥a terminal trong Termux
      clearTerminal()
      console.log('‚úÖ T·∫§T C·∫¢ BOT ƒê√É HO√ÄN TH√ÄNH NHI·ªÜM V·ª§')
      console.log('‚è∞ B·∫Øt ƒë·∫ßu log m·ªói 10 ph√∫t...\n')
      
      // Log ngay l·∫ßn ƒë·∫ßu ti√™n
      const now = new Date()
      const timeString = now.toLocaleTimeString('vi-VN')
      console.log(`üì¢ B√¢y gi·ªù l√† : ${timeString}`)
      
      // Thi·∫øt l·∫≠p interval log to√†n c·ª•c
      let count = 2
      globalIntervalId = setInterval(() => {
        const now = new Date()
        const timeString = now.toLocaleTimeString('vi-VN')
        console.log(`üì¢ 10p l·∫ßn ${count} : ${timeString}`)
        count++
      }, config.intervals.globalLog)
    }, 3000) // ƒê·ª£i 3 gi√¢y
  }
}

// ========== THI·∫æT L·∫¨P S·ª∞ KI·ªÜN BOT ==========
function setupBotEvents(bot) {
  let hasCompletedFirstTask = false
  let spawnCount = 0
  bot.stopAttacking = null

  bot.on('spawn', async () => {
    spawnCount++
    console.log(`[${bot.username}] ƒê√£ spawn (l·∫ßn ${spawnCount})`)
    
    if (spawnCount === 2 && hasCompletedFirstTask) {
      completedBots++
      console.log(`[${bot.username}] ‚úÖ ƒê√£ ho√†n th√†nh nhi·ªám v·ª• (${completedBots}/${config.botConfigs.length})`)
      
      // B·∫Øt ƒë·∫ßu log hotbar
      bot.hotbarInterval = startHotbarLogger(bot)
      
      // B·∫Øt ƒë·∫ßu ki·ªÉm tra ƒë√≥i
      bot.hungerInterval = setInterval(() => autoEatSteak(bot), config.intervals.autoEatCheck)
      console.log(`[${bot.username}] üçó ƒê√£ b·∫≠t auto eat (ki·ªÉm tra m·ªói ${config.intervals.autoEatCheck/1000}s)`)

      bot.setQuickBarSlot(0)
      console.log(`[${bot.username}] ƒê√£ c·∫ßm ƒë·ªì ·ªü √¥ th·ª© 1`)
      
      // N·∫øu l√† bot ƒë·∫∑c bi·ªát, b·∫Øt ƒë·∫ßu t·∫•n c√¥ng entity
      if (bot.botConfig.special && !bot.stopAttacking) {
        bot.stopAttacking = startRandomAttacking(bot)
      }
      
      checkAllBotsCompleted()
      return
    }

    // Spawn l·∫ßn 1: l√†m task ƒë·∫ßu ti√™n
    if (spawnCount === 1 && !hasCompletedFirstTask) {
      doFirstTask(bot)
    }
  })

  // ========== TASK ƒê·∫¶U TI√äN ==========
  async function doFirstTask(bot) {
    console.log(`[${bot.username}] B·∫Øt ƒë·∫ßu task ƒë·∫ßu ti√™n...`)

    setTimeout(() => {
      bot.chat(`/login ${bot.botConfig.password}`)
      console.log(`[${bot.username}] ƒê√£ login`)
    }, 2000)

    setTimeout(async () => {
      const mcData = require('minecraft-data')(bot.version)
      const movements = new Movements(bot, mcData)
      bot.pathfinder.setMovements(movements)

      const goal = new goals.GoalBlock(
        config.positions.target.x,
        config.positions.target.y,
        config.positions.target.z
      )
      bot.pathfinder.setGoal(goal)

      bot.once('goal_reached', async () => {
        console.log(`[${bot.username}] ƒê√£ t·ªõi v·ªã tr√≠ (${config.positions.target.x}, ${config.positions.target.y}, ${config.positions.target.z})`)
        
        bot.setQuickBarSlot(4)
        console.log(`[${bot.username}] ƒê√£ c·∫ßm ƒë·ªì ·ªü √¥ th·ª© 5`)
        setTimeout(() => {
          bot.activateItem()
          console.log(`[${bot.username}] ƒê√£ chu·ªôt ph·∫£i`)

          setTimeout(() => {
            if (bot.currentWindow) {
              // Click v√†o c√°c √¥ GUI ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong config
              config.positions.guiClicks.forEach((click, index) => {
                setTimeout(() => {
                  bot.clickWindow(click.slot, 0, 0)
                  console.log(`[${bot.username}] ƒê√£ click ${click.description}`)
                  
                  if (index === config.positions.guiClicks.length - 1) {
                    hasCompletedFirstTask = true
                    console.log(`[${bot.username}] ‚úÖ ƒê√£ ho√†n th√†nh task ƒë·∫ßu ti√™n`)
                  }
                }, 2000 * (index + 1))
              })
            } else {
              console.log(`[${bot.username}]  Kh√¥ng m·ªü ƒë∆∞·ª£c hub`)
            }
          }, 2000)
        }, 3000)
      })
    }, 3000)
  }

  bot.on('kicked', reason => {
    console.log(`[${bot.username}] B·ªã kick:`, reason)
    if (bot.stopAttacking) {
      bot.stopAttacking()
      bot.stopAttacking = null
    }
    if (bot.hotbarInterval) clearInterval(bot.hotbarInterval)
    if (bot.hungerInterval) clearInterval(bot.hungerInterval)
    if (bot.attackInterval) clearInterval(bot.attackInterval)
    resetAllBots()
  })

  bot.on('error', err => {
    console.log(`[${bot.username}] L·ªói:`, err)
    if (bot.stopAttacking) {
      bot.stopAttacking()
      bot.stopAttacking = null
    }
    if (bot.hotbarInterval) clearInterval(bot.hotbarInterval)
    if (bot.hungerInterval) clearInterval(bot.hungerInterval)
    if (bot.attackInterval) clearInterval(bot.attackInterval)
    resetAllBots()
  })

  bot.on('end', () => {
    console.log(`[${bot.username}] ƒê√£ ng·∫Øt k·∫øt n·ªëi`)
    if (bot.stopAttacking) {
      bot.stopAttacking()
      bot.stopAttacking = null
    }
    if (bot.hotbarInterval) clearInterval(bot.hotbarInterval)
    if (bot.hungerInterval) clearInterval(bot.hungerInterval)
    if (bot.attackInterval) clearInterval(bot.attackInterval)
  })

  bot.on('quit', () => {
    console.log(`[${bot.username}] ƒê√£ t·ª± tho√°t`)
    if (bot.stopAttacking) {
      bot.stopAttacking()
      bot.stopAttacking = null
    }
    if (bot.hotbarInterval) clearInterval(bot.hotbarInterval)
    if (bot.hungerInterval) clearInterval(bot.hungerInterval)
    if (bot.attackInterval) clearInterval(bot.attackInterval)
  })
}

// ========== KH·ªûI CH·∫†Y T·∫§T C·∫¢ BOT ==========
console.log(`üü¢ B·∫Øt ƒë·∫ßu kh·ªüi ch·∫°y ${config.botConfigs.length} bot...`)
config.botConfigs.forEach((botConfig, index) => {
  createBotWithDelay(botConfig, index * config.intervals.botStartDelay, index)
})

// ========== THI·∫æT L·∫¨P RESET ƒê·ªäNH K·ª≤ ==========
resetIntervalId = setInterval(() => {
  resetAllBots()
}, config.intervals.autoReset)

// ========== X·ª¨ L√ù T·∫ÆT SCRIPT ==========
process.on('SIGINT', () => {
  console.log('\nüõë ƒêang t·∫Øt t·∫•t c·∫£ bot...')
  
  // D·ªçn d·∫πp t·∫•t c·∫£ interval
  if (globalIntervalId) {
    clearInterval(globalIntervalId)
  }
  if (resetIntervalId) {
    clearInterval(resetIntervalId)
  }
  
  // Ng·∫Øt k·∫øt n·ªëi t·∫•t c·∫£ bot
  bots.forEach(bot => {
    if (bot && typeof bot.quit === 'function') {
      bot.quit()
    }
  })
  
  setTimeout(() => process.exit(), 1000)
})