const mineflayer = require('mineflayer')
const { pathfinder, Movements, goals } = require('mineflayer-pathfinder')

// ========== T·∫ÆT C·∫¢NH B√ÅO PARTIAL PACKET ==========
process.setMaxListeners(50)
process.on('warning', (warning) => {
  if (warning.message.includes('partial packet')) return
})

// ========== DANH S√ÅCH BOT ==========
const botConfigs = [
  { username: 'nobody01', password: '11092003' },
  { username: 'nobody02', password: '11092003' },
  { username: 'nobody03', password: '11092003' },
  { username: 'nobody04', password: '11092003' },
]

const bots = []
let completedBots = 0
let allBotsCompleted = false
let globalIntervalId = null

// ========== QU·∫¢N L√ù TIN NH·∫ÆN CHAT ==========
const processedMessages = new Set()
const messageTimestamps = new Map()
const MESSAGE_TIMEOUT = 5000 // 5 gi√¢y

function simpleHash(str) {
  let hash = 0
  for (let i = 0; i < str.length; i++) {
    hash = ((hash << 5) - hash) + str.charCodeAt(i)
    hash = hash & hash // Convert to 32bit integer
  }
  return hash.toString()
}

function isDuplicateMessage(hash) {
  // X√≥a tin nh·∫Øn c≈© sau timeout
  const now = Date.now()
  for (const [msgHash, timestamp] of messageTimestamps.entries()) {
    if (now - timestamp > MESSAGE_TIMEOUT) {
      messageTimestamps.delete(msgHash)
      processedMessages.delete(msgHash)
    }
  }
  
  return processedMessages.has(hash)
}

function markMessageAsProcessed(hash) {
  processedMessages.add(hash)
  messageTimestamps.set(hash, Date.now())
}

// ========== H√ÄM X√ìA TERMINAL CHO TERMUX ==========
function clearTerminal() {
  process.stdout.write('\x1B[2J\x1B[3J\x1B[H');
}

// ========== H√ÄM T·∫†O BOT ==========
function createBotWithDelay(config, delay, index) {
  setTimeout(() => {
    console.log(`üöÄ Kh·ªüi ƒë·ªông bot: ${config.username}`)
    
    const botOptions = {
      host: 'luckyvn.com',
      port: 25565,
      username: config.username,
      version: '1.21.4'
    }

    const bot = mineflayer.createBot(botOptions)
    bot.loadPlugin(pathfinder)
    bot.botConfig = config
    bot.botIndex = index // Th√™m index ƒë·ªÉ qu·∫£n l√Ω

    // T·∫Øt c·∫£nh b√°o partial packet
    bot._client.on('error', (err) => {
      if (err.message.includes('partial packet')) return
    })

    setupBotEvents(bot)
    bots.push(bot)
  }, delay)
}

// ========== KI·ªÇM TRA T·∫§T C·∫¢ BOT ƒê√É HO√ÄN TH√ÄNH ==========
function checkAllBotsCompleted() {
  if (completedBots === botConfigs.length && !allBotsCompleted) {
    allBotsCompleted = true
    
    // ƒê·ª£i 3 gi√¢y tr∆∞·ªõc khi clear terminal
    setTimeout(() => {
      // X√≥a terminal trong Termux
      clearTerminal()
      console.log('‚úÖ T·∫§T C·∫¢ BOT ƒê√É HO√ÄN TH√ÄNH NHI·ªÜM V·ª§')
      console.log('‚è∞ B·∫Øt ƒë·∫ßu log m·ªói 10 ph√∫t...\n')
      
      // Log ngay l·∫ßn ƒë·∫ßu ti√™n
      const now = new Date()
      const timeString = now.toLocaleTimeString('vi-VN')
      console.log(`üì¢ B√¢y gi·ªù l√† : ${timeString}`)
      
      // Thi·∫øt l·∫≠p interval log to√†n c·ª•c
      let count = 1
      globalIntervalId = setInterval(() => {
        const now = new Date()
        const timeString = now.toLocaleTimeString('vi-VN')
        console.log(`üì¢ 10p l·∫ßn ${count} : ${timeString}`)
        count++
      }, 10 * 60 * 1000) // 10 ph√∫t
    }, 3000) // ƒê·ª£i 3 gi√¢y
  }
}

// ========== THI·∫æT L·∫¨P S·ª∞ KI·ªÜN BOT ==========
function setupBotEvents(bot) {
  let hasCompletedFirstTask = false
  let spawnCount = 0

  // ========== PH·∫¶N X·ª¨ L√ù CHAT - CH·ªà HI·ªÇN TH·ªä [+] V√Ä [-] ==========
  bot.on('message', (message) => {
    const chatMessage = message.toString().trim()
    
    // B·ªè qua tin nh·∫Øn r·ªóng ho·∫∑c c·ªßa ch√≠nh bot
    if (!chatMessage || chatMessage.includes(bot.username)) return
    
    // CH·ªà HI·ªÇN TH·ªä TIN NH·∫ÆN C√ì [+] HO·∫∂C [-]
    const hasJoinLeave = chatMessage.includes('[+]') || chatMessage.includes('[-]')
    
    if (!hasJoinLeave) return
    
    // Ki·ªÉm tra xem tin nh·∫Øn n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi bot kh√°c ch∆∞a
    const messageHash = simpleHash(chatMessage)
    
    // N·∫øu tin nh·∫Øn m·ªõi
    if (!isDuplicateMessage(messageHash)) {
      console.log(`üí¨ ${chatMessage}`)
      markMessageAsProcessed(messageHash)
    }
  })

  bot.on('spawn', async () => {
    spawnCount++
    console.log(`[${bot.username}] ƒê√£ spawn (l·∫ßn ${spawnCount})`)
    
    // N·∫øu ƒë√£ ho√†n th√†nh task ƒë·∫ßu ti√™n (spawn l·∫ßn 2)
    if (spawnCount >= 2 && hasCompletedFirstTask) {
      completedBots++
      console.log(`[${bot.username}] ‚úÖ ƒê√£ ho√†n th√†nh nhi·ªám v·ª• (${completedBots}/${botConfigs.length})`)

      checkAllBotsCompleted()
      return
    }

    // Spawn l·∫ßn 1: l√†m task ƒë·∫ßu ti√™n
    if (spawnCount === 1 && !hasCompletedFirstTask) {
      doFirstTask(bot)
    }
  })

  // ========== TASK ƒê·∫¶U TI√äN ==========
  async function doFirstTask(bot) {
    console.log(`[${bot.username}] B·∫Øt ƒë·∫ßu task ƒë·∫ßu ti√™n...`)

    setTimeout(() => {
      bot.chat(`/login ${bot.botConfig.password}`)
      console.log(`[${bot.username}] ƒê√£ login`)
    }, 2000)

    setTimeout(async () => {
      const mcData = require('minecraft-data')(bot.version)
      const movements = new Movements(bot, mcData)
      bot.pathfinder.setMovements(movements)

      const goal = new goals.GoalBlock(-2, 65, -3)
      bot.pathfinder.setGoal(goal)

      bot.once('goal_reached', async () => {
        console.log(`[${bot.username}] ƒê√£ t·ªõi v·ªã tr√≠ (-2, 65, -3)`)
        
        bot.setQuickBarSlot(4)
        console.log(`[${bot.username}] ƒê√£ c·∫ßm ƒë·ªì ·ªü √¥ th·ª© 5`)

        setTimeout(() => {
          bot.activateItem()
          console.log(`[${bot.username}] ƒê√£ chu·ªôt ph·∫£i`)

          setTimeout(() => {
            if (bot.currentWindow) {
              bot.clickWindow(22, 0, 0)
              console.log(`[${bot.username}] ƒê√£ click √¥ c·ªôt 5 h√†ng 3`)
              
              setTimeout(() => {
                bot.clickWindow(30, 0, 0)
                console.log(`[${bot.username}] ƒê√£ click √¥ c·ªôt 4 h√†ng 4`)
                
                hasCompletedFirstTask = true
                console.log(`[${bot.username}] ‚úÖ ƒê√£ ho√†n th√†nh task ƒë·∫ßu ti√™n`)
                               
              }, 2000)
            } else console.log(`[${bot.username}] Kh√¥ng m·ªü dc HUB`)
          }, 3000)
        }, 1000)
      })
    }, 3000)
  }

  bot.on('kicked', reason => console.log(`[${bot.username}] B·ªã kick:`, reason))
  bot.on('error', err => console.log(`[${bot.username}] L·ªói:`, err))
  bot.on('end', () => console.log(`[${bot.username}] ƒê√£ ng·∫Øt k·∫øt n·ªëi`))
}

// ========== KH·ªûI CH·∫†Y T·∫§T C·∫¢ BOT ==========
console.log(`üü¢ B·∫Øt ƒë·∫ßu kh·ªüi ch·∫°y ${botConfigs.length} bot...`)
botConfigs.forEach((config, index) => {
  createBotWithDelay(config, index * 30000, index)
})

// ========== X·ª¨ L√ù T·∫ÆT SCRIPT ==========
process.on('SIGINT', () => {
  console.log('\nüõë ƒêang t·∫Øt t·∫•t c·∫£ bot...')
  
  // D·ªçn d·∫πp interval to√†n c·ª•c
  if (globalIntervalId) {
    clearInterval(globalIntervalId)
  }
  
  bots.forEach(bot => {
    bot.quit()
  })
  
  setTimeout(() => process.exit(), 1000)
})